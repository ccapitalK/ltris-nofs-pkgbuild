--- bowl.c	2017-09-09 16:28:47.353607616 +1000
+++ bowl.c	2017-09-09 16:29:02.897112145 +1000
@@ -333,7 +333,7 @@
 Set a tile contents and pixel contents.
 ====================================================================
 */
-inline void bowl_set_tile( Bowl *bowl, int x, int y, int tile_id )
+void bowl_set_tile( Bowl *bowl, int x, int y, int tile_id )
 {
     int i, j = y * bowl->block_size;
     bowl->contents[x][y] = tile_id;
--- tools.c	2017-09-09 16:28:54.923690988 +1000
+++ tools.c	2017-09-09 16:30:09.121175243 +1000
@@ -23,27 +23,27 @@
 #include "ltris.h"
 
 /* compares to strings and returns true if their first strlen(str1) chars are equal */
-inline int strequal( char *str1, char *str2 )
+int strequal( char *str1, char *str2 )
 {
     if ( strlen( str1 ) != strlen( str2 ) ) return 0;
     return ( !strncmp( str1, str2, strlen( str1 ) ) );
 }
 
 /* set delay to ms milliseconds */
-inline void delay_set( Delay *delay, int ms )
+void delay_set( Delay *delay, int ms )
 {
     delay->limit = ms;
     delay->cur = 0;
 }
 
 /* reset delay ( cur = 0 )*/
-inline void delay_reset( Delay *delay )
+void delay_reset( Delay *delay )
 {
     delay->cur = 0;
 }
 
 /* check if times out and reset */
-inline int delay_timed_out( Delay *delay, int ms )
+int delay_timed_out( Delay *delay, int ms )
 {
     delay->cur += ms;
     if ( delay->cur >= delay->limit ) {
@@ -56,12 +56,12 @@
 }
 
 /* set timer so that we have a time out next call of delay_timed_out() */
-inline void delay_force_time_out( Delay *delay )
+void delay_force_time_out( Delay *delay )
 {
     delay->cur = delay->limit;
 }
 
-inline void goto_tile( int *x, int *y, int d )
+void goto_tile( int *x, int *y, int d )
 {
     /*  0 -up, clockwise, 5 - left up */
     switch ( d ) {
@@ -326,24 +326,24 @@
 the target value until reached when counter_update() is called.
 ====================================================================
 */
-inline void counter_set( Counter *counter, double value )
+void counter_set( Counter *counter, double value )
 {
     counter->value = value;
     counter->approach = value;
 }
-inline void counter_add( Counter *counter, double add )
+void counter_add( Counter *counter, double add )
 {
     counter->value += add;
 }
-inline double counter_get_approach( Counter counter )
+double counter_get_approach( Counter counter )
 {
     return counter.approach;
 }
-inline double counter_get( Counter counter )
+double counter_get( Counter counter )
 {
     return counter.value;
 }
-inline void counter_update( Counter *counter, int ms )
+void counter_update( Counter *counter, int ms )
 {
     double change;
     if ( counter->approach == counter->value ) return;
--- sdl.c	2017-09-09 16:28:51.956991648 +1000
+++ sdl.c	2017-09-09 16:29:28.187390763 +1000
@@ -244,7 +244,7 @@
 #endif
 
 /* return full path of bitmap */
-inline void get_full_bmp_path( char *full_path, char *file_name )
+void get_full_bmp_path( char *full_path, char *file_name )
 {
     sprintf(full_path,  "%s/gfx/%s", SRC_DIR, file_name );
 }
@@ -330,7 +330,7 @@
 /*
     lock surface
 */
-inline void lock_surf(SDL_Surface *sur)
+void lock_surf(SDL_Surface *sur)
 {
     if (SDL_MUSTLOCK(sur))
         SDL_LockSurface(sur);
@@ -339,7 +339,7 @@
 /*
     unlock surface
 */
-inline void unlock_surf(SDL_Surface *sur)
+void unlock_surf(SDL_Surface *sur)
 {
     if (SDL_MUSTLOCK(sur))
         SDL_UnlockSurface(sur);
@@ -666,7 +666,7 @@
 /*
     lock font surface
 */
-inline void lock_font(Font *fnt)
+void lock_font(Font *fnt)
 {
     if (SDL_MUSTLOCK(fnt->pic))
         SDL_LockSurface(fnt->pic);
@@ -675,7 +675,7 @@
 /*
     unlock font surface
 */
-inline void unlock_font(Font *fnt)
+void unlock_font(Font *fnt)
 {
     if (SDL_MUSTLOCK(fnt->pic))
         SDL_UnlockSurface(fnt->pic);
@@ -905,7 +905,7 @@
 /*
     update rectangle (0,0,0,0)->fullscreen
 */
-inline void refresh_screen(int x, int y, int w, int h)
+void refresh_screen(int x, int y, int w, int h)
 {
     SDL_UpdateRect(sdl.screen, x, y, w, h);
 }
@@ -1055,7 +1055,7 @@
 /*
     lock surface
 */
-inline void lock_screen()
+void lock_screen()
 {
     if (SDL_MUSTLOCK(sdl.screen))
         SDL_LockSurface(sdl.screen);
@@ -1064,7 +1064,7 @@
 /*
     unlock surface
 */
-inline void unlock_screen()
+void unlock_screen()
 {
     if (SDL_MUSTLOCK(sdl.screen))
         SDL_UnlockSurface(sdl.screen);
@@ -1073,7 +1073,7 @@
 /*
     flip hardware screens (double buffer)
 */
-inline void flip_screen()
+void flip_screen()
 {
     SDL_Flip(sdl.screen);
 }
@@ -1132,7 +1132,7 @@
 /*
     get milliseconds since last call
 */
-inline int get_time()
+int get_time()
 {
     int ms;
     cur_time = SDL_GetTicks();
@@ -1148,7 +1148,7 @@
 /*
     reset timer
 */
-inline void reset_timer()
+void reset_timer()
 {
     last_time = SDL_GetTicks();
 }
--- tetris.c	2017-09-09 16:48:57.644021059 +1000
+++ tetris.c	2017-09-09 16:49:22.964321250 +1000
@@ -107,13 +107,13 @@
                         ret = 1; go_on = 0;
                         break;
                     }
-					else
-					if ( event.key.keysym.sym == SDLK_f ) {
-						config.fullscreen = !config.fullscreen;
-						set_video_mode( std_video_mode( config.fullscreen ) );
-						draw_confirm_screen( font, buffer, str );
-						refresh_screen( 0, 0, 0, 0 );
-					}
+					//else
+					//if ( event.key.keysym.sym == SDLK_f ) {
+					//	config.fullscreen = !config.fullscreen;
+					//	set_video_mode( std_video_mode( config.fullscreen ) );
+					//	draw_confirm_screen( font, buffer, str );
+					//	refresh_screen( 0, 0, 0, 0 );
+					//}
                 }
                 else
                     if (event.key.keysym.sym == SDLK_ESCAPE) {
@@ -387,16 +387,16 @@
                                     if ( bowls[i] && !bowls[i]->game_over )
                                         bowl_finish_game( bowls[i] );
                             break;
-                         case SDLK_f:
-                             /* switch fullscreen */
-                            config.fullscreen = !config.fullscreen;
-                            set_video_mode( std_video_mode( config.fullscreen ) );
-                            FULL_DEST( sdl.screen ); FULL_SOURCE( offscreen ); blit_surf();
-                            refresh_screen( 0, 0, 0, 0 );
-                        case SDLK_TAB:
-                            sprintf( sshot_str, "ss%i.bmp", screenshot_id++ );
-                            SDL_SaveBMP( sdl.screen, sshot_str );
-                            break;
+                        // case SDLK_f:
+                        //     /* switch fullscreen */
+                        //    config.fullscreen = !config.fullscreen;
+                        //    set_video_mode( std_video_mode( config.fullscreen ) );
+                        //    FULL_DEST( sdl.screen ); FULL_SOURCE( offscreen ); blit_surf();
+                        //    refresh_screen( 0, 0, 0, 0 );
+                        //case SDLK_TAB:
+                        //    sprintf( sshot_str, "ss%i.bmp", screenshot_id++ );
+                        //    SDL_SaveBMP( sdl.screen, sshot_str );
+                        //    break;
                         default: break;
                     }
                     break;
--- manager.c	2017-09-09 16:56:51.836302976 +1000
+++ manager.c	2017-09-09 16:57:37.660178225 +1000
@@ -504,11 +504,11 @@
 			if ( cur_menu->cur_item == 0 || ( cur_menu->cur_item->type != ITEM_EDIT && cur_menu->cur_item->type != ITEM_KEY ) )
 				if ( event.type == SDL_KEYUP )
 					if ( event.key.keysym.sym == SDLK_f ) {
-						config.fullscreen = !config.fullscreen;
-						set_video_mode( std_video_mode( config.fullscreen ) );
-						FULL_DEST( sdl.screen ); FULL_SOURCE( mbkgnd ); blit_surf();
-					    chart_show( chart_set_query_id( chart_id ), cx, cy, cw, ch );
-						refresh_screen( 0, 0 ,0, 0 );
+					//	config.fullscreen = !config.fullscreen;
+					//	set_video_mode( std_video_mode( config.fullscreen ) );
+					//	FULL_DEST( sdl.screen ); FULL_SOURCE( mbkgnd ); blit_surf();
+					//    chart_show( chart_set_query_id( chart_id ), cx, cy, cw, ch );
+					//	refresh_screen( 0, 0 ,0, 0 );
 					}
 			/* check if clicked on highscore */
 			if ( event.type == SDL_MOUSEBUTTONUP ) 
